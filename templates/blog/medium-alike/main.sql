/* 

From Supabase - User Management starter template

*/

-- Create a table for public profiles
create table profiles (
  id uuid references auth.users not null primary key,
  updated_at timestamp with time zone,
  username text unique,
  full_name text,
  avatar_url text,
  website text,

  constraint username_length check (char_length(username) >= 3)
);
-- Set up Row Level Security (RLS)
-- See https://supabase.com/docs/guides/database/postgres/row-level-security for more details.
alter table profiles
  enable row level security;

create policy "Public profiles are viewable by everyone." on profiles
  for select using (true);

create policy "Users can insert their own profile." on profiles
  for insert with check ((select auth.uid()) = id);

create policy "Users can update own profile." on profiles
  for update using ((select auth.uid()) = id);

-- This trigger automatically creates a profile entry when a new user signs up via Supabase Auth.
-- See https://supabase.com/docs/guides/auth/managing-user-data#using-triggers for more details.
create function public.handle_new_user()
returns trigger
set search_path = ''
as $$
begin
  insert into public.profiles (id, full_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$$ language plpgsql security definer;
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- Set up Storage!
insert into storage.buckets (id, name)
  values ('avatars', 'avatars');

-- Set up access controls for storage.
-- See https://supabase.com/docs/guides/storage/security/access-control#policy-examples for more details.
create policy "Avatar images are publicly accessible." on storage.objects
  for select using (bucket_id = 'avatars');

create policy "Anyone can upload an avatar." on storage.objects
  for insert with check (bucket_id = 'avatars');

create policy "Anyone can update their own avatar." on storage.objects
  for update using ((select auth.uid()) = owner) with check (bucket_id = 'avatars');

/* 

Tables for blog

*/

create table
  public.post (
    id bigint generated by default as identity not null,
    created_at timestamp with time zone not null default now(),
    modified_at timestamp with time zone not null default now(),
    published_at timestamp with time zone null,
    published boolean not null default false,
    user_id uuid not null default auth.uid (),
    title character varying null,
    slug character varying null,
    description character varying null,
    content text null,
    keywords character varying null,
    visibility public.post_visiblity not null default 'public'::post_visiblity,
    featured_image_url character varying null,
    constraint post_pkey primary key (id),
    constraint post_title_slug_key unique nulls not distinct (title, slug),
    constraint post_user_id_fkey foreign key (user_id) references profile (id) on delete cascade,
    constraint post_publish_check check (
      (
        (published = false)
        or (
          ((title)::text <> ''::text)
          and (title is not null)
          and ((slug)::text <> ''::text)
          and (slug is not null)
          and ((description)::text <> ''::text)
          and (description is not null)
          and (content <> ''::text)
          and (content is not null)
        )
      )
    )
  ) tablespace pg_default;


create table
  public.post_faq (
    id bigint generated by default as identity not null,
    created_at timestamp with time zone not null default now(),
    post_id bigint not null,
    question character varying not null,
    answer text not null,
    user_id uuid not null,
    constraint post_faq_pkey primary key (id),
    constraint post_faq_post_id_fkey foreign key (post_id) references post (id) on delete cascade,
    constraint post_faq_user_id_fkey foreign key (user_id) references profile (id) on delete cascade
  ) tablespace pg_default;


create table
  public.tag (
    id bigint generated by default as identity not null,
    created_at timestamp with time zone not null default now(),
    name character varying not null,
    slug character varying not null,
    description character varying null,
    user_id uuid null default auth.uid (),
    constraint tag_pkey primary key (id),
    constraint tag_name_key unique (name),
    constraint tag_slug_key unique (slug),
    constraint tag_user_id_fkey foreign key (user_id) references profile (id) on delete cascade
  ) tablespace pg_default;


create table
  public.user_block_user (
    id bigint generated by default as identity not null,
    created_at timestamp with time zone not null default now(),
    user_id uuid not null,
    block_user_id uuid not null,
    constraint user_block_user_pkey primary key (id),
    constraint unique_block_user unique (user_id, block_user_id),
    constraint user_block_user_block_user_id_fkey foreign key (block_user_id) references profile (id) on delete cascade,
    constraint user_block_user_user_id_fkey foreign key (user_id) references profile (id) on delete cascade
  ) tablespace pg_default;


create table
  public.user_bookmarked_post (
    created_at timestamp with time zone not null default now(),
    user_id uuid not null default auth.uid (),
    post_id bigint not null,
    id bigint generated by default as identity not null,
    constraint user_bookmarked_post_pkey primary key (id),
    constraint unique_post_bookmark unique (user_id, post_id),
    constraint user_bookmarked_post_post_id_fkey foreign key (post_id) references post (id) on delete cascade,
    constraint user_bookmarked_post_user_id_fkey foreign key (user_id) references profile (id) on delete cascade
  ) tablespace pg_default;


create table
  public.user_follow_user (
    created_at timestamp with time zone not null default now(),
    user_id uuid not null default auth.uid (),
    following_user_id uuid not null,
    id bigint generated by default as identity not null,
    constraint user_follow_user_pkey primary key (id),
    constraint unique_user_follow_author unique (user_id, following_user_id),
    constraint user_follow_user_following_user_id_fkey foreign key (following_user_id) references profile (id) on delete cascade,
    constraint user_follow_user_user_id_fkey foreign key (user_id) references profile (id) on delete cascade,
    constraint user_follow_check check ((user_id <> following_user_id))
  ) tablespace pg_default;
